/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.felixsoinfotech.karma_gateway.client.friendship_service.api;

import com.felixsoinfotech.karma_gateway.client.friendship_service.model.RegisteredUserModel;
import com.felixsoinfotech.karma_gateway.client.friendship_service.model.WellwisherAndRelationship;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-03-12T10:38:41.530+05:30[Asia/Calcutta]")

@Api(value = "RegisteredUserGraphResource", description = "the RegisteredUserGraphResource API")
public interface RegisteredUserGraphResourceApi {

    @ApiOperation(value = "checkRegisteredUserIsFollowedOrIsFriend", nickname = "checkRegisteredUserIsFollowedOrIsFriendUsingGET", notes = "", response = Boolean.class, tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/registeredUser/isFollowed-isFriend/{currentUserId}/{registeredUserId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> checkRegisteredUserIsFollowedOrIsFriendUsingGET(@ApiParam(value = "currentUserId",required=true) @PathVariable("currentUserId") String currentUserId,@ApiParam(value = "registeredUserId",required=true) @PathVariable("registeredUserId") String registeredUserId);


    @ApiOperation(value = "checkRegisteredUserIsFollowed", nickname = "checkRegisteredUserIsFollowedUsingGET", notes = "", response = Boolean.class, tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/registeredUser/is-Followed/{userId}/{wellWisherId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> checkRegisteredUserIsFollowedUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "wellWisherId",required=true) @PathVariable("wellWisherId") String wellWisherId);


    @ApiOperation(value = "checkRegisteredUserIsFriend", nickname = "checkRegisteredUserIsFriendUsingGET", notes = "", response = Boolean.class, tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/registeredUser/is-Friend/{userId}/{friendId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> checkRegisteredUserIsFriendUsingGET(@ApiParam(value = "friendId") @Valid @RequestParam(value = "friendId", required = false) String friendId,@ApiParam(value = "userId") @Valid @RequestParam(value = "userId", required = false) String userId);


    @ApiOperation(value = "countOfWellWishersByUserId", nickname = "countOfWellWishersByUserIdUsingGET", notes = "", response = Long.class, tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/registeredUser/wellWishers-count/{userId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countOfWellWishersByUserIdUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "countOfWellWishingByUserId", nickname = "countOfWellWishingByUserIdUsingGET", notes = "", response = Long.class, tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/registeredUser/wellWishing-count/{userId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countOfWellWishingByUserIdUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "createWellWisherOrFriend", nickname = "createWellWisherOrFriendUsingPOST", notes = "", response = String.class, tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/create-wellwisher-friend/registeredUser/",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<String> createWellWisherOrFriendUsingPOST(@ApiParam(value = "registeredUserModel" ,required=true )  @Valid @RequestBody RegisteredUserModel registeredUserModel);


    @ApiOperation(value = "findAllWellWishersByUserId", nickname = "findAllWellWishersByUserIdUsingGET", notes = "", response = WellwisherAndRelationship.class, responseContainer = "List", tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = WellwisherAndRelationship.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/registeredUser/well-Wishers/{userId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<WellwisherAndRelationship>> findAllWellWishersByUserIdUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "findAllWellWishingByUserId", nickname = "findAllWellWishingByUserIdUsingGET", notes = "", response = WellwisherAndRelationship.class, responseContainer = "List", tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = WellwisherAndRelationship.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/registeredUser/well-Wishing/{userId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<WellwisherAndRelationship>> findAllWellWishingByUserIdUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "unFollowOrUnFriend", nickname = "unFollowOrUnFriendUsingPOST", notes = "", response = String.class, tags={ "registered-user-graph-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/graph/unFollow-unFriend/registeredUser/{currentUserId}/{registeredUserId}",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<String> unFollowOrUnFriendUsingPOST(@ApiParam(value = "currentUserId",required=true) @PathVariable("currentUserId") String currentUserId,@ApiParam(value = "registeredUserId",required=true) @PathVariable("registeredUserId") String registeredUserId);

}
